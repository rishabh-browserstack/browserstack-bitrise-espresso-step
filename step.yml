#
# A couple of useful guides & docs:
#
# - Main Bitrise CLI docs: https://github.com/bitrise-io/bitrise/tree/master/_docs
# - Step Development Guideline: https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
# - Bitrise.yml format spec: https://github.com/bitrise-io/bitrise/blob/master/_docs/bitrise-yml-format-spec.md
# - Bitrise docs: http://devcenter.bitrise.io/
# - Bitrise CLI guides: http://devcenter.bitrise.io/bitrise-cli/

title: |-
  BrowserStack App Automate - Espresso
summary: |
  Run your Espresso tests on BrowserStack App Automate
description: |
  Run your Espresso tests on BrowserStack App Automate. This step collects the built APK from $BITRISE_APK_PATH  and test apk from `$BITRISE_TEST_APK_PATH` Environment Variables
website: https://github.com/browserstack/browserstack-bitrise-espresso-step
source_code_url: https://github.com/browserstack/browserstack-bitrise-espresso-step
support_url: https://github.com/browserstack/browserstack-bitrise-espresso-step/issues
host_os_tags:
  - osx-10.10
  - ubuntu-16.04

# If this step should be available only for certain project types
# just uncomment this `project_type_tags` section and include all the
# project types supported by the step. If the step can be used for all
# project types then you can just remove this section.
# If no `project_type_tags` specified (or specified as an empty array)
# that means the step can be used for any project type.
# You can find more information about project type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
#
project_type_tags:
  - android
#   - ios
#   - macos
#   - xamarin
#   - react-native
#   - cordova
#   - ionic

# Type tags are used for categorizing steps, for easier step discovery in Step Libraries.
# You can find more information about type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
type_tags:
  - test

is_requires_admin_user: true
is_always_run: false
is_skippable: false
run_if: ""

deps:
  brew:
  - name: git
  - name: wget
  apt_get:
  - name: git
  - name: wget


toolkit:
  go:
    package_name: github.com/browserstack/browserstack-bitrise-espresso-step


inputs:
  # Auth inputs
  - browserstack_username: 
    opts:
      title: "BrowserStack username"
      summary: Username for the BrowserStack account
      is_required: true
      is_sensitive: true
      description: Username of the BrowserStack account
      # category: "Authentication"
  - browserstack_accesskey: 
    opts:
      title: "BrowserStack accesskey"
      summary: Accesskey for the BrowserStack account
      is_required: true
      is_sensitive: true
      description: Access Key of the BrowserStack account
      # category: "Authentication"
      
  # APK's
  - android_app_under_test: 
    opts:
      title: "Android app under test"
      summary: Path to the app .apk file
      is_expand: true
      is_required: true
      description: Path of the app (.apk) file
      # category: "App & Test Suite"
  - espresso_test_suite: 
    opts:
      title: "Espresso test suite"
      summary: Path to the testsuite .apk file
      is_expand: true
      is_required: true
      description: Path of the test suite (.apk) file
      # category: "App & Test Suite"
      
  # Devices
  - devices_list: 
    opts:
      title: "Devices"
      summary: |
        Name of one or more device-OS combination in new line from the [device list](https://www.browserstack.com/list-of-browsers-and-platforms/app_automate).
      description: |
        Name of one or more device-OS combination in new line 
        For example:
        
        `Samsung Galaxy S9 Plus-9.0`
        
        `Google Pixel 3a-9.0`
      is_expand: true
      is_required: true
      # category: "Devices"
      
  # Debug logs inputs
  - instrumentation_logs: true
    opts:
      title: "Instrumentation logs"
      summary: "Enable Instrumentation Logs generated by AndroidJunitRunner"
      description: "Instrumentation logs are a comprehensive record of your Espresso test executions that helps you identify all the steps executed in the test."
      value_options: 
        - true
        - false
      category: "Debug logs"
  - network_logs: false
    opts:
      title: "Network Logs"
      summary: "Enable network traffic, latency, HTTP requests and responses in the HAR (HTTP Archive) format"
      description: "Network logs captures the network traffic, latency, HTTP requests and responses in the HAR (HTTP Archive) format. "
      value_options: 
        - true
        - false
      category: "Debug logs"
  - device_logs: false
    opts:
      title: "Android logcat logs"
      summary: "Enable logs generated by Android logcat"
      description: "Device logs are system logs specific to your application generated by Android logcat that help you debug any test crashes."
      value_options: 
        - true
        - false
      category: "Debug logs"
  - debug_screenshots: false
    opts:
      title: "Capture Screenshots"
      summary: "Capture the screenshots in your tests"
      description: Screenshots makes it easier to identify the exact step in your test where the failure occurred, especially any layout or design-related issues.
      value_options: 
        - true
        - false
      category: "Debug logs"
  - video_recording: true
    opts:
      title: "Video recording"
      summary: "Enable the video of the test run"
      description: Video recording helps you view the entire test execution and helps debug any failed test. 
      value_options: 
        - true
        - false
      category: "Debug logs"
      
  # project inputs
  - project: 
    opts:
      title: "Project name"
      summary: "Project name of the tests."
      description: A project name helps you group multiple Espresso test executions under a single project.
      category: "Test Configuration"
  - filter_test:
    opts:
      title: "Filter tests"
      summary: |
        Key-value pairs of filters to run tests from supported test filtering strategies: class, package, annotation, size.
        Examples: 
        For class filtering strategy:
        
        `class com.android.foo.ClassA`, `class com.android.foo.ClassB`,`class com.android.foo.ClassC`
        
        For package filtering strategy:
        
        `package com.android.foo`
        
        For annotation filtering strategy:
        
        `annotation com.android.foo.MyAnnotation`
        
        For size filtering strategy:
        
        `size small`,`size medium`,`size large`
      description: |
        Provide key-value pairs of filters to run tests: class, package, annotation, size
        
        For example: class com.foo.AddToCartClass,class com.foo.CheckoutClass
        
        package com.foo
        
        Learn more.(https://www.browserstack.com/docs/app-automate/espresso/select-test-cases)
      category: "Test Configuration"
  - use_test_sharding:  
    opts:
      title: "Test sharding"
      summary: "Enable test sharding to split tests cases into different groups instead of running them sequentially. "
      description: "Test sharding splits and run test cases into different group called shards. This behaviour is helpful when your test-suite has a large number of test cases. [Learn more.](https://www.browserstack.com/docs/app-automate/espresso/test-sharding)"
      category: "Test Configuration"
  - clear_app_data: false
    opts:
      title: "Clear app data"
      summary: "Enable to clear app data after every test run"
      description: "An app might need clean state of the app storage to run every test case. Use this feature  to clear app data after every test run. [Learn more.](https://www.browserstack.com/docs/app-automate/espresso/clear-app-data)"
      value_options: 
        - true
        - false
      category: "Test Configuration"
  - use_single_runner_invocation: false
    opts:
      title: "Single runner invocation"
      summary: "Enable to run each test case in a single process to reduce overall build time."
      description: "The single runner invocation feature runs each test case in a single process that reduces the overall build time. [Learn more.](https://www.browserstack.com/docs/app-automate/espresso/single-runner-invocation)"
      value_options: 
        - true
        - false
      category: "Test Configuration"
  - project_notify_url: 
    opts:
      title: "Notify project status"
      summary: "A callback URL to enable BrowserStack notify about completion of build under a given project. "
      description: "A callback URL helps you enable BrowserStack notify you upon the completion of all builds under a given project. You will receive a callback if no new builds triggered for 5 minutes and all existing builds have completed their execution.This parameter requires that the Project name parameter also be set."
      category: "Test Configuration"
  - use_local: false 
    opts:
      title: "Local testing"
      summary: "Enable local testing to retrieve app data hosted on local/private servers"
      description: "Enable local testing to retrieve app data hosted on local/private servers"
      value_options: 
        - true
        - false
      category: "Test Configuration"
  - use_mock_server: false
    opts:
      title: "Mock server"
      summary: "Enable to mock a web server in your espresso tests to mock your API responses. Learn more."
      description: "A mock web server mocks the behavior of an actual remote server. This makes it easy to test different scenarios without depending on your remote server and without having to make changes to your remote server. Local Testing, Network logs, and IP geolocation will not work if you are using a mock server. [Learn more.](https://www.browserstack.com/docs/app-automate/espresso/use-mock-server)"
      value_options: 
        - true
        - false
      category: "Test Configuration"
      # API params
  - api_params:
    opts:
      title: "Test capabilities"
      summary: New line key-value pairs of capabilities provided by BrowserStack.
      description: |
        New line key-value pairs of capabilities provided by BrowserStack.
        
        For example:
        coverage=true
        
        geoLocation=CN
        
        [Learn about more capabilities.](https://www.browserstack.com/docs/app-automate/api-reference/espresso/builds#execute-a-build)
      category: "Test Configuration"
  - check_build_status: true
    opts:
      title: "Build Status"
      description: "Wait for build results"
      summary: "Wait for BrowserStack to complete the execution and get the test results"
      value_options: 
        - true
        - false
      category: "Test Configuration"
      

outputs:
  - BROWSERSTACK_BUILD_URL:
    opts:
      title: "BrowserStack Dashboard url"
      summary: ""
      description: "BrowserStack Dashboard url for the executed build"
  - BROWSERSTACK_BUILD_STATUS:
    opts:
      title: "BrowserStack Build Status"
      summary: Bs build status
      description: | 
        Status of the executed build. Check values [here:] (https://www.browserstack.com/docs/app-automate/espresso/view-test-results)



